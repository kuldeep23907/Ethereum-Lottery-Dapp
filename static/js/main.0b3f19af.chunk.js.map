{"version":3,"sources":["web3.js","lottery.js","App.js","serviceWorker.js","index.js"],"names":["web3","a","window","ethereum","Web3","currentProvider","enable","getWeb3","console","log","Lottery","abi","eth","Contract","App","useState","manager","setManager","accounts","setAccounts","amount","setAmount","players","setPlayers","betAmt","setBetAmt","message","setMessage","useEffect","getAccounts","accts","lottery","methods","call","mng","getBalance","options","address","amt","getGamersList","gamers","start","enterGame","event","preventDefault","enter","send","from","value","utils","toWei","announceResult","announceWinner","winnerAdr","fromWei","length","onSubmit","onChange","target","type","placeholder","onClick","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error"],"mappings":"m6LAEIA,E,uGACS,uCAAI,sBAAAC,EAAA,6DAETD,EADAE,OAAOC,SACA,IAAIC,IAAKF,OAAOC,UAEhB,IAAIC,IAAKF,OAAOF,KAAKK,iBAJnB,SAMPH,OAAOC,SAASG,SANT,2CAAJ,qDAQbC,GACeP,Q,SCVfQ,QAAQC,IAAIC,EAAQC,KACpB,IACe,MAAIX,EAAKY,IAAIC,SAASH,EAAQC,IADrB,8CCuETG,MArEf,WAAgB,IAAD,EACiBC,mBAAS,MAD1B,mBACNC,EADM,KACGC,EADH,OAEmBF,mBAAS,IAF5B,mBAENG,EAFM,KAEIC,EAFJ,OAGeJ,mBAAS,GAHxB,mBAGNK,EAHM,KAGEC,EAHF,OAIiBN,mBAAS,IAJ1B,mBAINO,EAJM,KAIGC,EAJH,OAKeR,mBAAS,GALxB,mBAKNS,EALM,KAKEC,EALF,OAMiBV,mBAAS,kBAN1B,mBAMNW,EANM,KAMGC,EANH,KAQbC,qBAAU,YACG,uCAAG,kCAAA3B,EAAA,sEACQD,EAAKY,IAAIiB,cADjB,cACNC,EADM,OAEZX,EAAYW,GACZtB,QAAQC,IAAIqB,GAHA,SAIMC,EAAQC,QAAQhB,UAAUiB,OAJhC,cAINC,EAJM,OAKZ1B,QAAQC,IAAIyB,GALA,KAMZjB,EANY,UAMKc,EAAQC,QAAQhB,UAAUiB,OAN/B,oDAQOjC,EAAKY,IAAIuB,WAAWJ,EAAQK,QAAQC,SAR3C,eAQNC,EARM,OASZjB,EAAUiB,GATE,UAWSP,EAAQC,QAAQO,gBAAgBN,OAXzC,QAWNO,EAXM,OAYZjB,EAAWiB,GAZC,4CAAH,qDAcXC,KACC,IAEH,IAAMC,EAAS,uCAAG,WAAMC,GAAN,SAAA1C,EAAA,6DAChB0C,EAAMC,iBACNjB,EAAW,8CAFK,SAGVI,EAAQC,QAAQa,QAAQC,KAAK,CACjCC,KAAM7B,EAAS,GACf8B,MAAOhD,EAAKiD,MAAMC,MAAM1B,EAAQ,WALlB,OAOhBG,EAAW,gCAPK,2CAAH,sDAUTwB,EAAc,uCAAG,WAAMR,GAAN,eAAA1C,EAAA,6DACrB0C,EAAMC,iBACNjB,EAAW,qBAFU,SAGGI,EAAQC,QAAQoB,iBAAiBN,KAAK,CAACC,KAAK7B,EAAS,KAHxD,OAGfmC,EAHe,OAIrB7C,QAAQC,IAAI4C,GACZ1B,EAAW,4BAA8B0B,GALpB,2CAAH,sDAQpB,OACE,6BACE,4CACA,sDAA4BrC,GAC5B,6BACJ,gDAAsBhB,EAAKiD,MAAMK,QAAQlC,EAAO,GAAG,SAAnD,2BAAqFE,EAAQiC,OAA7F,YACA,6BACA,mEACA,6BACE,0BAAMC,SAAUd,GACd,8DAA0C,2BAAOe,SAAU,SAACd,GAAWlB,EAAUkB,EAAMe,OAAOV,OAAOxC,QAAQC,IAAIe,IAAUmC,KAAK,OAAOC,YAAY,gBACnJ,2CAGJ,4BAAKlC,GACL,6BACA,6BACE,kDACA,4BAAQmC,QAASV,GAAjB,0BCvDgBW,QACW,cAA7B5D,OAAO6D,SAASC,UAEe,UAA7B9D,OAAO6D,SAASC,UAEhB9D,OAAO6D,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLtE,QAAQsE,MAAMA,EAAMpD,c","file":"static/js/main.0b3f19af.chunk.js","sourcesContent":["import Web3 from 'web3';\n\nlet web3;\nconst getWeb3 =  async() => {\n    if (window.ethereum) {\n        web3 = new Web3(window.ethereum);\n    } else {\n        web3 = new Web3(window.web3.currentProvider);\n    }\n    await window.ethereum.enable();\n}\ngetWeb3();\nexport default web3;\n","import web3 from './web3';\nimport Lottery from './contract/Lottery.json';\nconsole.log(Lottery.abi);\nconst contractAddress = '0xfAeDeaAE65B8c0aEcabE6306cB155466D8335A05';\nexport default new web3.eth.Contract(Lottery.abi,contractAddress);","import React, { useState, useEffect, Component } from 'react';\nimport './App.css';\nimport web3 from './web3';\nimport lottery from './lottery';\n\nfunction App() {\n  const [manager, setManager] = useState('me');\n  const [accounts, setAccounts] = useState([]);\n  const [amount, setAmount] = useState(0.0);\n  const [players, setPlayers] = useState([]);\n  const [betAmt, setBetAmt] = useState(0.0);\n  const [message, setMessage] = useState('Start the game');\n\n  useEffect(() => {\n    const start = async() => {\n      const accts = await web3.eth.getAccounts();\n      setAccounts(accts);\n      console.log(accts);\n      const mng = await lottery.methods.manager().call();\n      console.log(mng);\n      setManager(await lottery.methods.manager().call());\n\n      const amt =  await web3.eth.getBalance(lottery.options.address);\n      setAmount(amt);\n\n      const gamers = await lottery.methods.getGamersList().call();\n      setPlayers(gamers);\n    }\n    start();\n  }, [])\n\n  const enterGame = async(event) => {\n    event.preventDefault();\n    setMessage('Transaction begin, wait for few seconds...');\n    await lottery.methods.enter().send({\n      from: accounts[0],\n      value: web3.utils.toWei(betAmt, 'ether')\n    })\n    setMessage('Yep, you are in the game now');\n  }\n\n  const announceResult = async(event) => {\n    event.preventDefault();\n    setMessage('Hold ur breath...');\n    const winnerAdr = await lottery.methods.announceWinner().send({from:accounts[0]});\n    console.log(winnerAdr);\n    setMessage('And the winner is address' + winnerAdr);\n  }\n\n  return(\n    <div>\n      <h2>Lottery game</h2>\n      <p>This game is managed by {manager}</p>\n      <hr></hr>\n  <p>You can fight for {web3.utils.fromWei(amount+'','ether')} ethers with these many {players.length} players</p>\n  <hr></hr>\n  <p>Wanna try? Enter the amount and play</p>\n  <div>\n    <form onSubmit={enterGame}>\n      <label>Enter the amount in ether  </label><input onChange={(event) => {setBetAmt(event.target.value);console.log(betAmt)}} type=\"text\" placeholder=\"in ether...\"></input>\n      <button>Play!</button>\n    </form>\n  </div>\n  <h1>{message}</h1>\n  <hr></hr>\n  <div>\n    <p>Only Manger Access!</p>\n    <button onClick={announceResult}>Announce the winner</button>\n  </div>\n    </div>\n  );\n\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}